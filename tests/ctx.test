package require tcltest
::tcltest::configure {*}$argv

package require djdsl::ctx


namespace eval ::djdsl::ctx::test {
  namespace import ::tcltest::*
  namespace import ::djdsl::lm::*
  namespace import ::djdsl::ctx::*
  
  variable SETUP {set (lm1) [Asset create Graphs {
    LanguageModel create Graph {
      :property name
      :property -incremental {edges:0..*,type=Graph::Edge,substdefault {[list]}}
      :property -incremental {nodes:0..*,type=Graph::Node,substdefault {[list]}}
      
      Classifier create Node
      Classifier create Edge {
        :property -accessor public a:object,type=Node,required
        :property -accessor public b:object,type=Node,required
      }
    }

    Collaboration create weighted {
      Classifier create Weight {
        :property -accessor public {value 0}
      }
      Role create A
      Role create Edge -superclasses A {
        :property -accessor public weight:object,type=Weight
      }
    }
  }]

    set (comp1) [Composition create WeightedGraphs \
                     -binds Graphs \
                     -base $(lm1)::Graph \
                     -features $(lm1)::weighted]
  }

  variable SETUP2 {
    set (asset1) [Asset create Graphs {
      LanguageModel create Graph {
        :property name
        :property -incremental {edges:0..*,type=Graph::Edge,substdefault {[list]}}
        :property -incremental {nodes:0..*,type=Graph::Node,substdefault {[list]}}
        
        Classifier create Node
        Classifier create Edge {
          :property -accessor public a:object,type=Node,required
          :property -accessor public b:object,type=Node,required
        }
      }
      
      Collaboration create weighted {
        Classifier create Weight {
          :property -accessor public {value 0}
        }
        Role create A
        Role create Edge -superclasses A {
          :property -accessor public weight:object,type=Weight
        }
      }
    }]
    
    set (asset2) [Asset create Colours {
      Collaboration create coloured {
        Classifier create Color {
          :property -accessor public {value 0}
        }
        Classifier create B
        Role create Edge -superclasses B {
          :property -accessor public \
              colour:object,type=Color,required
        }
        :public method colored {} {return 1}
      }
    }]
    
    set (ccomp) [Composition new \
                   -binds [list $(asset1) $(asset2)] \
                   -base $(asset1)::Graph \
                   -features [list $(asset2)::coloured $(asset1)::weighted]]
  }

  
  variable CLEANUP {
    if {[array exists {}]} {
      foreach k [array names {}] {
        set v [set ($k)]
        foreach i $v {
          if {[::nsf::is object $i]} {
            # puts "          $i destroy"
            $i destroy
          }
        }
      }
      array unset {}
      unset -nocomplain k
      unset -nocomplain v
    }
  }
  
  test ctx-1.1 "Set up context condition" -setup $SETUP -body {
    $(lm1)::Graph condition add [Condition new -bodyExpression {
      [llength [:edges get]]*2 == [llength [:nodes get]]
    }]
    llength [$(lm1)::Graph condition get]
  } -cleanup $CLEANUP -result 1

  test ctx-1.2 "Evaluate condition against a context instance (a.k.a. validation)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        $(subject) nodes add [$(subject) new node]
        $(subject) nodes add [$(subject) new node]

        $(lm1)::Graph isValid $(subject)
      } -cleanup $CLEANUP -result 0; # -match glob -result "DJDSL CTX VIOLATED *"

    test ctx-1.3 "Evaluate condition against a context instance (a.k.a. validation)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        $(subject) nodes add $(n1)
        $(subject) nodes add $(n2)
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]
        
        $(lm1)::Graph isValid $(subject)
        
      } -cleanup $CLEANUP -result 1

    test ctx-1.4 "Entering into wrong refinement (validation) chain" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        $(subject) nodes add $(n1)
        $(subject) nodes add $(n2)
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]
        
        catch {$(lm1)::Graph::Edge isValid $(subject)} (->) (opts)
        dict get $(opts) -errorcode
        
      } -cleanup $CLEANUP -match glob -result "DJDSL CTX FAILED ANCESTRY *"

  test ctx-2.1 "Basic chaining (allOf, and)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::weighted condition add [Condition new -bodyExpression {
          false
        }]

        set (subject) [$(comp1) new graph -name "wg"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        set (e) [$(subject) new edge -a $(n1) -b $(n2) \
                     -weight [$(subject) new weight -value 2]]        
        
        $(comp1)::Graph isValid2 -and $(subject)
        
      } -cleanup $CLEANUP -result 0

  test ctx-2.2 "Basic chaining (oneOf, or)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::weighted condition add [Condition new -bodyExpression {
          false
        }]
        
        set (subject) [$(comp1) new graph -name "wg"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        set (e) [$(subject) new edge -a $(n1) -b $(n2) \
                     -weight [$(subject) new weight -value 2]]        
        
        $(comp1)::Graph isValid -or $(subject)
        
      } -cleanup $CLEANUP -result 1

  
  test ctx-2.3 "Basic chaining (oneOf, or) fails" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]] && false
        }]

        $(lm1)::weighted condition add [Condition new -bodyExpression {
          false
        }]
        
        set (subject) [$(comp1) new graph -name "wg"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        set (e) [$(subject) new edge -a $(n1) -b $(n2) \
                     -weight [$(subject) new weight -value 2]]
        
        $(comp1)::Graph isValid -or $(subject)
        
      } -cleanup $CLEANUP -result 0

    test ctx-2.4 "Basic chaining (allOf, and), skip forward" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::weighted condition add [set (c0) [Condition new -bodyExpression {
          false
        }]]

        $(comp1)::Graph condition add [set (c1) [Condition new -bodyExpression {
          true
        }]]

        set (subject) [$(comp1) new graph -name "wg"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        set (e) [$(subject) new edge -a $(n1) -b $(n2) \
                     -weight [$(subject) new weight -value 2]]        
        
        lappend () [$(comp1)::Graph isValid2 -and $(subject)]
        lappend () [$(comp1)::Graph isValid2 $(subject)]

        $(lm1)::weighted condition delete $(c0)

        lappend () [$(comp1)::Graph isValid2 -and $(subject)]
        lappend () [$(comp1)::Graph isValid2 $(subject)]
        
      } -cleanup $CLEANUP -result "0 1 1 1"

 
    test ctx-3.1 "Basic combination" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition set [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        set (subject) [$(comp1) new graph -name "wg"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        set (e) [$(subject) new edge -a $(n1) -b $(n2) \
                     -weight [$(subject) new weight -value 2]]
        
        lappend () [$(comp1)::Graph isValid $(subject)]

        $(lm1)::weighted condition set [Condition new -bodyExpression {
          [next] && false
        }]

        lappend () [$(comp1)::Graph isValid $(subject)]

        $(lm1)::weighted condition set [Condition new -bodyExpression {
          [next] || false
        }]

        lappend () [$(comp1)::Graph isValid $(subject)]
        
      } -cleanup $CLEANUP -result "1 0 1"
  
  test ctx-3.2 "Basic combination (2+ levels)" \
      -setup $SETUP2 \
      -body {
        $(asset1)::Graph condition set [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        set (subject) [$(ccomp) new graph -name "wg"]
        set (n1) [$(subject) new node]
        set (n2) [$(subject) new node]
        set (e) [$(subject) new edge -a $(n1) -b $(n2) \
                   -weight [$(subject) new weight -value 2] \
                   -colour [$(subject) new color -value "violet"]]
        
        lappend () [$(ccomp)::Graph isValid $(subject)]

        $(asset1)::weighted condition set [Condition new -bodyExpression {
          [next] && false
        }]

        lappend () [$(ccomp)::Graph isValid $(subject)]

        $(asset2)::coloured condition set [Condition new -bodyExpression {
          false || ![next]
        }]
        
        lappend () [$(ccomp)::Graph isValid $(subject)]
        
      } -cleanup $CLEANUP -result "1 0 1"


  test ctx-4.1 "AssetElement propagation (LanguageModel -> Classifiers)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::Graph::Edge condition add [set (c2) [Condition new -bodyExpression {
          [:a get] ne [:b get]
        }]]

        $(lm1)::Graph::Node condition add [set (c3) [Condition new -bodyExpression {
          true
        }]]
        
        set (subject) [Graphs new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]
                
        lappend () [$(lm1)::Graph isValid $(subject)]

        set (subject2) [$(lm1) new graph -name "g2"]
        $(subject2) nodes add [set (n3) [$(subject2) new node]]
        $(subject2) nodes add [set (n4) [$(subject2) new node]]
        $(subject2) edges add [$(subject2) new edge -a $(n1) -b $(n1)]

        lappend () [$(lm1)::Graph isValid $(subject2)]
        catch [list $(lm1)::Graph validate $(subject2)] (->) (opts)
        lappend () [expr {[lindex [dict get $(opts) -errorcode] end-1] eq $(c2)}]

        $(lm1)::Graph::Node condition add [set (c4) [Condition new -bodyExpression {
          false
        }]]

        lappend () [$(lm1)::Graph isValid $(subject)]
        catch [list $(lm1)::Graph validate $(subject)] (->) (opts)
        lappend () [expr {[lindex [dict get $(opts) -errorcode] end-1] eq $(c4)}]

        
        lappend () [$(lm1)::Graph isValid $(subject2)]
        catch [list $(lm1)::Graph validate $(subject2)] (->) (opts)
        lappend () [expr {[lindex [dict get $(opts) -errorcode] end-1] eq $(c4)}]
        
      } -cleanup $CLEANUP -result "1 0 1 0 1 0 1";

    test ctx-4.2 "AssetElement propagation + chaining" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::Graph::Edge condition add [Condition new -bodyExpression {
          [:a get] ne [:b get]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]

        lappend () [$(lm1)::Graph isValid $(subject)]

        set (subject2) [$(comp1) new graph -name "wg"]
        $(subject2) nodes add [set (n3) [$(subject) new node]]
        $(subject2) nodes add [set (n4) [$(subject) new node]]
        $(subject2) edges add [set (e1) [$(subject2) new edge -a $(n3) -b $(n4) \
                                             -weight [set (w1) [$(subject2) new weight -value 5]]]]

        lappend () [$(comp1)::Graph isValid $(subject2)]
        
        $(lm1)::weighted::Edge condition add [set (c1) [Condition new -bodyExpression {
          [[:weight get] value get] > 5
        }]]

        lappend () [$(comp1)::Graph isValid $(subject2)]
        catch [list $(comp1)::Graph validate $(subject2)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(c1) && $(actualChecked) eq $(e1)}]
        
      } -cleanup $CLEANUP -result "1 1 0 1";

  test ctx-5.1 "Basic constraints" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::Graph::Edge condition add [Condition new -bodyExpression {
          [:a get] ne [:b get]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]

        lappend () [$(lm1)::Graph isValid $(subject)]

        set (p1) [$(subject) info lookup variables nodes]
        $(subject) eval {set :nodes {1 2}}

        lappend () [$(lm1)::Graph isValid $(subject)]
        catch [list $(lm1)::Graph validate $(subject)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(p1) &&
                          $(actualChecked) eq $(subject)}]
        
      } -cleanup $CLEANUP -result "1 0 1";

    test ctx-5.2 "Basic constraints (multi-valued)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]

        $(lm1)::Graph::Edge condition add [Condition new -bodyExpression {
          [:a get] ne [:b get]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]

        lappend () [$(lm1)::Graph isValid $(subject)]

        set (p1) [$(subject) info lookup variables nodes]
        $(subject) eval {set :nodes "\{${:nodes}"}

        lappend () [$(lm1)::Graph isValid $(subject)]
        catch [list $(lm1)::Graph validate $(subject)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(p1) &&
                          $(actualChecked) eq $(subject)}]
        
      } -cleanup $CLEANUP -result "1 0 1";

  test ctx-5.3 "Basic constraints (defaults)" \
      -setup $SETUP \
      -body {
        $(lm1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        $(lm1)::Graph::Edge condition add [Condition new -bodyExpression {
          [:a get] ne [:b get]
        }]
        
        set (subject) [$(lm1) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [$(subject) new edge -a $(n1) -b $(n2)]

        lappend () [$(lm1)::Graph isValid $(subject)]

        set (p1) [$(subject) info lookup variables nodes]
        $(subject) eval {unset :nodes}

        lappend () [$(lm1)::Graph isValid $(subject)]
        catch [list $(lm1)::Graph validate $(subject)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(p1) &&
                          $(actualChecked) eq $(subject)}]
        
      } -cleanup $CLEANUP -result "1 0 1";
  
  test ctx-6.1 "stepwise validation (incl. introduction-only)" \
      -setup $SETUP2 \
      -body {

        $(asset1)::Graph condition add [Condition new -bodyExpression {
          [llength [:edges get]]*2 == [llength [:nodes get]]
        }]
        
        $(ccomp)::Graph condition add [set (c0) [Condition new -bodyExpression {
          ![next]
        }]]
        
        set (subject) [$(ccomp) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [set (e1) [$(subject) new edge -a $(n1) -b $(n2) \
                                            -weight [$(subject) new weight -value 1] \
                                            -colour [$(subject) new color -value "red"]]]

        lappend () [$(asset1)::Graph isValid $(subject)]; # introduction-only
        lappend () [$(ccomp)::Graph isValid $(subject)]; # entire chain of context conditions (incl. composition-specific ones)
        catch [list $(ccomp)::Graph validate $(subject)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(c0) &&
                          $(actualChecked) eq $(subject)}]

        $(asset1)::Graph::Edge condition add [set (c1) [Condition new -bodyExpression {
          [:a get] eq [:b get]
        }]]

        $(ccomp)::Graph condition delete $(c0)
        
        lappend () [$(asset1)::Graph isValid $(subject)]; # introduction-only, plus roles
        catch [list $(asset1)::Graph validate $(subject)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(c1) &&
                          $(actualChecked) eq $(e1)}]

        $(ccomp)::Graph::Edge condition add [Condition new -bodyExpression {
          ![next]
        }]

        lappend () [$(ccomp)::Graph isValid $(subject)]; # entire chain of context conditions (incl. composition-specific ones), plus roles

        lappend () [$(asset1)::weighted isValid $(subject)]; # weighted + introduction (fails)
        catch {$(asset1)::weighted validate $(subject)} (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(c1) &&
                          $(actualChecked) eq $(e1)}]

        $(asset1)::weighted::Edge condition add [set (c2) [Condition new -bodyExpression {
          ![next]
        }]]

        lappend () [$(asset1)::weighted isValid $(subject)]; # weighted + introduction (succeeds)

        lappend () [$(asset2)::coloured isValid $(subject)]; # coloured + weighted + introduction (succeeds)

        $(asset2)::coloured::Edge condition add [set (c2) [Condition new -bodyExpression {
         ![next]
        }]]

        lappend () [$(asset2)::coloured isValid $(subject)]; # coloured + weighted + introduction (fails, again!)

        catch {$(asset2)::coloured validate $(subject)} (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(c2) &&
                          $(actualChecked) eq $(e1)}]
        
      } -cleanup $CLEANUP -result "1 0 1 0 1 1 0 1 1 1 0 1";

  # 5) test case: frontend syntax for entering conditions
  
  test ctx-7.1 "frontend (adding one condition)" \
      -setup $SETUP2 \
      -body {
        context Graphs::Graph {
          cond {[:edges isSet] && [:edges forall e {
            [$e a get] in [:nodes get] &&
            [$e b get] in [:nodes get]}]}
        }

        llength [Graphs::Graph condition get]
      } -cleanup $CLEANUP -result "1";

  test ctx-7.2 "frontend (2+ conditions)" \
      -setup $SETUP2 \
      -body {
        context Graphs::Graph {
          cond {[:edges isSet] && [:edges forall e {
            [$e a get] in [:nodes get] &&
            [$e b get] in [:nodes get]}]}
          cond {true}
          cond {false}
        }

        llength [Graphs::Graph condition get]
      } -cleanup $CLEANUP -result "3";

  test ctx-7.3 "frontend (none)" \
      -setup $SETUP2 \
      -body {
        context Graphs::Graph {;}
        Graphs::Graph condition isSet
      } -cleanup $CLEANUP -result "0";


  # 6) test case: model methods (nested class per AssetElement,
  # *::weighted::helpers, mixed into upon validation, protected by
  # default; "model method" modifier for AssetElement)

  test ctx-8.1 "model methods (definition + call)" \
      -setup $SETUP2 \
      -body {
        Graphs::Graph \
            model method hasIsolates {} { return 0 }

        Graphs::Graph condition add [set (c0) [Condition new -bodyExpression {
          [:hasIsolates]
        }]]

        set (subject) [$(ccomp) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [set (e1) [$(subject) new edge -a $(n1) -b $(n2) \
                                            -weight [$(subject) new weight -value 1] \
                                            -colour [$(subject) new color -value "red"]]]

        
        lappend () [Graphs::Graph isValid $(subject)]
        catch [list Graphs::Graph validate $(subject)] (->) (opts)
        lassign [lreverse [dict get $(opts) -errorcode]] (actualChecked) (actualCond)
        lappend () [expr {$(actualCond) eq $(c0) &&
                          $(actualChecked) eq $(subject)}]

        Graphs::Graph condition delete $(c0)
        Graphs::Graph condition add [set (c1) [Condition new -bodyExpression {
          ![:hasIsolates]
        }]]

        lappend () [Graphs::Graph isValid $(subject)]

      } -cleanup $CLEANUP -result "0 1 1";

   test ctx-8.2 "model methods (API definition + call)" \
      -setup $SETUP2 \
      -body {
        
        set (subject) [$(ccomp) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [set (e1) [$(subject) new edge -a $(n1) -b $(n2) \
                                            -weight [$(subject) new weight -value 1] \
                                            -colour [$(subject) new color -value "red"]]]

        
        lappend () [Graphs::Graph isValid $(subject)]

        context Graphs::Graph {
          cond {[:hasIsolates2]}
          op hasIsolates2 {} { return 0 }
        }

        lappend () [Graphs::Graph isValid $(subject)]


      } -cleanup $CLEANUP -result "1 0";

  # 7) test case: copying object graph (IuV) for validation (to mimick
  # side-effect freeness)
  
  test ctx-9.1 "Pure mode" \
      -setup $SETUP2 \
      -body {
        
        set (subject) [$(ccomp) new graph -name "g"]
        $(subject) nodes add [set (n1) [$(subject) new node]]
        $(subject) nodes add [set (n2) [$(subject) new node]]
        $(subject) edges add [set (e1) [$(subject) new edge -a $(n1) -b $(n2) \
                                            -weight [$(subject) new weight -value 1] \
                                            -colour [$(subject) new color -value "red"]]]
        
        # Graphs::Graph validate2 outplace $(subject)
        
        set (r) [Graphs::Graph isValid2 -and -outplace $(subject)]
        lappend () [expr {$(r) && $(r) ==
                          [Graphs::Graph isValid $(subject)]}]
        
        context Graphs::Graph {
          cond {[:hasIsolates2]}
          op hasIsolates2 {} { return 0 }
        }
        
        set (r) [Graphs::Graph isValid2 -and -outplace $(subject)]
        lappend () [expr { !$(r) && $(r) ==
                           [Graphs::Graph isValid $(subject)]}]
        
        context $(ccomp)::Graph {
          op hasIsolates2 {} { return 1 }
        }
        
        set (r) [$(ccomp)::Graph isValid2 -and -outplace $(subject)]
        lappend () [expr { $(r) && $(r) ==
                           [$(ccomp)::Graph isValid $(subject)]}]

        context $(ccomp)::Graph {
          op hasIsolates2 {} { next }
        }
        
        set (r) [$(ccomp)::Graph isValid2 -and -outplace $(subject)]
        lappend () [expr { !$(r) && $(r) ==
                           [$(ccomp)::Graph isValid $(subject)]}]

        lappend () [expr {[$(subject) info lookup methods hasIsolates] eq ""}]
        lappend () [expr {[$(subject) info lookup methods hasIsolates2] eq ""}]
        
      } -cleanup $CLEANUP -result "1 1 1 1 1 1";
  
  # puts stderr >>>[info vars]
  # TODOS:
  # 1) test case propagation plus [next] combination [OK]
  # 2) test case: intrinsic conditions (property specs) [OK]
  # 3) test case: $comp1 validate $(subject) [OK]
  
  # 4) test case: basic quantifiers (forAll, collect, allInstances) for *::context namespace
  # 8) test case: model properties (let).
  # 9) test case: marker mode (evaluate all conditions, collect all violations, severity filter)
  # 10) test case: formatable violation message (cond "failed because of %name" {})
  # 11) intrinsic constraint for :reqired only properties yields
  # ::nsf::is call with type check. boom.
}

#
# Local variables:
#    mode: tcl
#    tcl-indent-level: 2
#    indent-tabs-mode: nil
# End:
#
