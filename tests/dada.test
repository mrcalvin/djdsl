package require tcltest
::tcltest::configure {*}$argv

package require djdsl::dada
package require djdsl::examples::models



namespace eval ::djdsl::dada::test {
  namespace import ::tcltest::*
  namespace import ::djdsl::dada::*
  namespace import ::djdsl::examples::models::*
  
  
  variable SETUP {
    
  }

  
  variable CLEANUP {
    if {[array exists {}]} {
      foreach k [array names {}] {
        set v [set ($k)]
        foreach i $v {
          if {[::nsf::is object $i]} {
            $i destroy
          }
        }
      }
      array unset {}
      unset -nocomplain k
      unset -nocomplain v
    }
    foreach b [Builder info instances -closure] {
      $b destroy
    }
    unset -nocomplain b
  }

  test dada-0.1 "Builder creation" -setup $SETUP -body {


    nx::Class create ComputerBuilder -superclasses Builder {
      :public method "<- test" {a} {
        return test-$a
      }
    }
    ComputerBuilder create ::cb -interp [ExprInterp new]
    lappend () [::cb get {test(1)}]
   

  } -cleanup $CLEANUP -result "test-1"
  
  test dada-0.2 "Builder chaining" -setup $SETUP -body {
    
    nx::Class create ComputerBuilder -superclasses [Builder] {
      :public method "<- test" {a} {
        return test-$a
      }
    }

    nx::Class create ExtraBuilder -superclasses [Builder] {
      :public method "<- test" {a} {
        return test-$a-[next [list [incr a]]]
      }
    }
    
    ComputerBuilder create ::cb -interp [ExprInterp new]
    lappend () [::cb get {test(1)}]
    # ::cb object mixins add ExtraBuilder
    ::cb predecessors add [ExtraBuilder]
    lappend () [::cb get {test(1)}]
    
    
  } -cleanup $CLEANUP -result "test-1 test-1-test-2"

  test dada-0.3 "Builder chaining: extension provider" -setup $SETUP -body {
    
    nx::Class create ComputerBuilder -superclasses [Builder] {
      :public method "<- test" {a} {
        return test-$a
      }
    }

    nx::Class create ExtraBuilder -superclasses [Builder] {
      :public method "<- extra" {a} {
        return extra-$a; # next
      }
    }
    
    ComputerBuilder create ::cb -interp [ExprInterp new]
    lappend () [::cb get {test(1)}]
    lappend () [catch {::cb get {extra(1)}}]
    # ::cb object mixins add ExtraBuilder
    ::cb predecessors add [ExtraBuilder]
    lappend () [::cb get {test(1)}]
    lappend () [catch {::cb get {extra(1)}}]
    
    
  } -cleanup $CLEANUP -result "test-1 1 test-1 0"


  #
  # unknown handling
  #
  
  test dada-0.4 "Builder: unknown handling (dynamic reception)" \
      -setup $SETUP \
      -body {
        
        nx::Class create ComputerBuilder -superclasses [Builder] {
          :public method "<- test" {a} {
            return test-$a
          }
          :public method handleUnknown {sub args} {
            return "NX-$sub-$args"
          }
        }

        ComputerBuilder create ::cb -interp [ExprInterp new] {
          :public object method handleUnknown {sub args} {
            list NX2-[next]
          }
        }
        lappend () [::cb get {nx(3)}]
        lappend () [::cb get {test(1)}]
        
      } \
      -cleanup $CLEANUP -result "NX2-NX-nx-3 test-1"

  test dada-0.5 "Builder: unknown handling under chaining (dynamic reception)" \
      -setup $SETUP \
      -body {
        
        nx::Class create ComputerBuilder -superclasses [Builder] {
          # per builder class
          :public method handleUnknown {sub args} {
            return "NX-$sub-$args"
          }
        }
        
        nx::Class create ExtraBuilder -superclasses [Builder] {
          # per builder extension
          :public method handleUnknown {sub args} {
            list NX3-[next]
          }
        }
    
        ComputerBuilder create ::cb2 -interp [ExprInterp new] {
          # per builder-instance
          :public object method handleUnknown {sub args} {
            list NX2-[next]
          }
        }
          
        # ::cb2 object mixins add ExtraBuilder
        ::cb2 predecessors add [ExtraBuilder]
        
        lappend () [::cb2 get {nx(3)}]
        lappend () [::cb2 get {unknown(1)}]
        
      } \
      -cleanup $CLEANUP -result "NX3-NX2-NX-nx-3 NX3-NX2-NX-unknown-1"

  test dada-0.6 "Builder: unknown handling under chaining (dynamic reception), empty interp" \
      -setup $SETUP \
      -body {
        
        nx::Class create ComputerBuilder -superclasses [Builder] {
          # per builder class
          :public method handleUnknown {sub args} {
            return "NX-$sub-$args"
          }
        }
        
        nx::Class create ExtraBuilder -superclasses [Builder] {
          # per builder extension
          :public method handleUnknown {sub args} {
            list NX3-[next]
          }
        }
    
        ComputerBuilder create ::cb2 -interp [EmptyInterp new] {
          # per builder-instance
          :public object method handleUnknown {sub args} {
            list NX2-[next]
          }
        }
          
        # ::cb2 object mixins add ExtraBuilder
        ::cb2 predecessors add [ExtraBuilder]
        
        lappend () [::cb2 get {nx 3}]
        # TODO: how to spot direct invocation of unknown?
        # - [info frame],[info level]?
        # - execute in some ns, so that unknown indirection matches those of ExprInterp?
        lappend () [::cb2 get {unknown 1}]
      } \
      -cleanup $CLEANUP -result "NX3-NX2-NX-nx-3 NX3-NX2-NX-1-"; # TODO: would like to see NX3-NX2-NX-nx-3 NX3-NX2-NX-unknown-1

  test dada-1.1 "Interp creation" -setup $SETUP -body {
    
    catch {Interp new} msg opts
    set () [dict get $opts -errorcode]

  } -cleanup $CLEANUP -result "DJDSL ABSTRACT"

  test dada-1.2 "Builder creation" -setup $SETUP -body {
    
    catch {Builder new} msg opts
    set () [dict get $opts -errorcode]

  } -cleanup $CLEANUP -result "DJDSL ABSTRACT"

  test dada-2.1 "literal list, without interp (top-down, recurse-descent)" \
      -setup $SETUP \
      -body {
        nx::Class create PlaybookBuilder -superclasses Builder {
          
          :variable currentItem [list]
          
          :public method "<- play" {content} {
            set p [${:output} new play]
            set :currentItem [linsert ${:currentItem} 0 [${:output} new play]]
            set r [:get $content]
            $p tasks set $r
            set :currentItem [lassign ${:currentItem} _]
            return $p
          }
          
          :public method "<- task" {content} {
            set t [${:output} new task]
            set :currentItem $t
            set r [:get $content]
            return $t
          }
          
          :public method handleUnknown {el content} {
            set c [lindex ${:currentItem} 0]
            $c $el set $content
            return
          }
          
          :public method "<- playbook" {content} {
            set :currentItem ${:output}
            set r [:get $content]
            ${:output} plays set $r
            return ${:output}
          }
          
          :public method get {script} {
            if {![llength ${:currentItem}]} {
              set script [list playbook $script] 
            }
            set out [list]
            foreach {element content} $script {
              lappend out {*}[:<- $element $content]
            }
            return $out
          }
        }
        
        PlaybookBuilder create pbb -output [Ansible new playbook]

        set (playbookScript) {
#// playbook3 //
play {
  hosts       webservers
  remote_user admin
  task {
    name    "is webserver running?"
    service {
      name  http
      state started}}}
play {
  hosts	databases
  remote_user admin
  task {
    name "is postgresql at the latest version?"
    yum  {
      name  postgresql
      state latest}}}
#// end //
}

        regsub -all -line {^\s*#//.*//\s*$} $(playbookScript) {} (playbookScript)

        set (pb) [pbb get $(playbookScript)]
        
        lappend () [$(pb) info class] 
        lappend () [llength [$(pb) plays get]]
        
      } -cleanup $CLEANUP \
    -result [list [Ansible]::Playbook 2]

test dada-2.1 "InstanceBuilder basics: default prefix" -setup $SETUP -body {

     nx::Class create MyInstanceBuilder -superclasses InstanceBuilder
     set (mib) [MyInstanceBuilder new]
     $(mib) properties add -x 1
     $(mib) properties add -z 1
     lappend () [[$(mib) get] info vars]
     set (mib2) [MyInstanceBuilder new]
     lappend () [[$(mib2) get] info vars]

} -cleanup $CLEANUP -result "{x z} {}"

  # OTHER TODOS:
  # - Provide Interp object for collocated calls (so that I don't have
  #   to check for interp existance or absence)
  # - UNKNOWN handling for direct unknown calls.
  # - complete predecessors API
  # - add successors counterpart, how?

}

if {0} {
  nx::Class create ComputerBuilder {
    :public method "<- computer" {a b} {
      return $a$b
    }
    :public method "<- disks" {c} {
      return $c
    }
    :public method "<- proc" {d} {
      return $d
    }
    
    :public method get {script} {
      if {[info commands [self]::runner] eq ""} {
        interp create [self]::runner -safe
      
        interp hide [self]::runner expr expr
        interp eval [self]::runner {namespace delete ::}
        interp expose [self]::runner expr expr
        foreach subm [:info lookup methods -path "<- *"] {
          lassign $subm _ m
          # TODO: handle subm as list/2+
          interp alias [self]::runner ::tcl::mathfunc::$m {} [self] {*}$subm
        }
      }
      [self]::runner eval [list ::expr $script]
    }
  }
}
  
#
# Local variables:
#    mode: tcl
#    tcl-indent-level: 2
#    indent-tabs-mode: nil
# End:
#
