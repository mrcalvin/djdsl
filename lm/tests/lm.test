package require tcltest
::tcltest::configure {*}$argv

package require djdsl::lm


namespace eval ::djdsl::lm::test {
  namespace import ::tcltest::*
  namespace import ::djdsl::lm::*

  customMatch stripNs [list apply {{testNs expected actual} {
    set strippedActual [string map [list $testNs ""] $actual]
    expr {$strippedActual eq $expected}
  }} [namespace current]]
  
  variable SETUP {
    set (lm1) [Asset create Graphs {
      LanguageModel create Graph {
        :property name
        :property -incremental {
          edges:0..*,type=Graph::Edge,substdefault {[list]}
        }
        :property -incremental {
          nodes:0..*,type=Graph::Node,substdefault {[list]}
        }
        
        Classifier create Node
        Classifier create Edge {
        :property -accessor public a:object,type=Node,required
        :property -accessor public b:object,type=Node,required
      }
    }

    Collaboration create weighted {
      Classifier create Weight {
        :property -accessor public {value 0}
      }
      Classifier create A
      Role create Edge -superclasses A {
        :property -accessor public weight:object,type=Weight
      }
    }
  }]

    set (comp1) [Composition create WeightedGraphs \
                   -binds Graphs \
                   -base $(lm1)::Graph \
                   -features $(lm1)::weighted]
  }
  
  variable CLEANUP {
    if {[array exists {}]} {
      foreach k [array names {}] {
        set v [set ($k)]
        # puts ($k)=$v
        foreach i $v {
          if {[::nsf::is object $i]} {
            # puts "          $i destroy"
            $i destroy
          }
        }
      }
      array unset {}
      unset -nocomplain k
      unset -nocomplain v
    }
  }

  test ctx-0 "Basics" -body {
    set (ctx) [Asset new]
    catch [list [Collaboration new -childof $(ctx)] new] msg opts
    lappend () [dict get $opts -errorcode]
    
    lappend () [catch [list [LanguageModel create $(ctx)::C] new]]
    lappend () [expr {[[$(ctx) new c] info class] eq "$(ctx)::C"}]

  } -cleanup $CLEANUP -result "{DJDSL ABSTRACT} 0 1"
  
  test ctx-1.1 "Nesting (assets)" -setup $SETUP -body {
    set (children) [$(lm1) info children -type ::djdsl::lm::AssetElement]
    lappend () [llength $(children)]
    lappend () [lsort [lmap c $(children) {
                                     $c info name
                                   }]]
  } -cleanup $CLEANUP -result "2 {Graph weighted}"

  test ctx-1.2 "Nesting (collaborations)" -setup $SETUP -body {
    set (children1) [$(lm1)::Graph info children \
                         -type AssetElement]
    lappend () [llength $(children1)]
    lappend () [lsort [lmap c $(children1) {
                                     $c info name
                                   }]]

    set (children2) [$(lm1)::weighted info children \
                        -type AssetElement]
    lappend () [llength $(children2)]
    lappend () [lsort [lmap c $(children2) {$c info name}]]

  } -cleanup $CLEANUP -result "2 {Edge Node} 3 {A Edge Weight}"

  test ctx-1.3 "Nesting (class relationships are localised)" -setup $SETUP -body {
    $(lm1)::weighted::Edge info superclasses
  } -cleanup $CLEANUP -result "[namespace current]::Graphs::weighted::A"

  test ctx-2.1 "FRO (basics): FFJ style of precedence order" -body {
    set (lm1) [Asset create SomeAsset {
      LanguageModel create SomeModel {
        Classifier create A
        Classifier create B -superclasses A
        Classifier create C -superclasses B
      }

      Collaboration create SomeFeature {
        Role create A
        Role create B
        Role create C
      }
    }]

    set (comp1) [Composition create SomeComp \
                     -binds SomeAsset \
                     -base $(lm1)::SomeModel \
                     -features $(lm1)::SomeFeature]

    [[$(comp1) new somemodel] new c] info precedence

  } -cleanup $CLEANUP -match stripNs -result [list ::SomeComp::SomeModel::C \
                                                  ::SomeAsset::SomeFeature::C \
                                                  ::SomeAsset::SomeModel::C \
                                                  ::SomeComp::SomeModel::B \
                                                  ::SomeAsset::SomeFeature::B \
                                                  ::SomeAsset::SomeModel::B \
                                                  ::SomeComp::SomeModel::A \
                                                  ::SomeAsset::SomeFeature::A \
                                                  ::SomeAsset::SomeModel::A \
                                                  ::nx::Object]

  test ctx-2.2 "FRO (with local precedences)" -body {
    set (lm1) [Asset create SomeAsset {
      LanguageModel create SomeModel {
        Classifier create A
        Classifier create B -superclasses A
        Classifier create C -superclasses B
      }

      Collaboration create SomeFeature {
        Role create A
        Classifier create D
        Role create B -superclasses D
        Role create C
      }
    }]

    set (comp1) [Composition create SomeComp \
                     -binds SomeAsset \
                     -base $(lm1)::SomeModel \
                     -features $(lm1)::SomeFeature]

    [[$(comp1) new somemodel] new c] info precedence

  } -cleanup $CLEANUP -match stripNs -result [list ::SomeComp::SomeModel::C \
                                                  ::SomeAsset::SomeFeature::C \
                                                  ::SomeAsset::SomeModel::C \
                                                  ::SomeComp::SomeModel::B \
                                                  ::SomeAsset::SomeFeature::B \
                                                  ::SomeComp::SomeModel::D \
                                                  ::SomeAsset::SomeFeature::D \
                                                  ::SomeAsset::SomeModel::B \
                                                  ::SomeComp::SomeModel::A \
                                                  ::SomeAsset::SomeFeature::A \
                                                  ::SomeAsset::SomeModel::A \
                                                  ::nx::Object]

  test ctx-2.3 "FRO (with local precedences)" -body {
    set (lm1) [Asset create SomeAsset {
      LanguageModel create SomeModel {
        Classifier create A
        Classifier create B -superclasses A
        Classifier create C -superclasses B
      }

      Collaboration create SomeFeature {
        Role create A
        Classifier create D
        Role create B -superclasses D
        Role create C
      }

      Collaboration create AnotherFeature {
        Role create D
      }
    }]

    set (comp1) [Composition create SomeComp \
                     -binds SomeAsset \
                     -base $(lm1)::SomeModel \
                     -features [list $(lm1)::SomeFeature $(lm1)::AnotherFeature]]

    [[$(comp1) new somemodel] new c] info precedence

  } -cleanup $CLEANUP -match stripNs -result [list ::SomeComp::SomeModel::C \
                                                  ::SomeAsset::SomeFeature::C \
                                                  ::SomeAsset::SomeModel::C \
                                                  ::SomeComp::SomeModel::B \
                                                  ::SomeAsset::SomeFeature::B \
                                                  ::SomeComp::SomeModel::D \
                                                  ::SomeAsset::AnotherFeature::D \
                                                  ::SomeAsset::SomeFeature::D \
                                                  ::SomeAsset::SomeModel::B \
                                                  ::SomeComp::SomeModel::A \
                                                  ::SomeAsset::SomeFeature::A \
                                                  ::SomeAsset::SomeModel::A \
                                                  ::nx::Object]
  
  # TODO: test case on abstractedness of Collaborations and Roles
  # TODO: test case on composition pre-conditions (Classifier for a Role etc.)
}

#
# Local variables:
#    mode: tcl
#    tcl-indent-level: 2
#    indent-tabs-mode: nil
# End:
#
